as.ppp(ppp(long,lat,window=win))#
}#
load("afg.data")#
#
afg <- afg.data#
spatstat.options(checkpolygons = FALSE) #
afg$data <- afg$data[!is.na(afg$data$Latitude),]
data.frame(0:nrow(dd)
)
ls
quit()
library(infochimps)
chimps<-infochimps("vv5cbsDQRvWcuwAhgfiXkLHLx69")
strong.links("drewconway",chimps)
library(igraph)
G<-graph.data.frame(strong.links("drewconway",ses))
G<-graph.data.frame(strong.links("drewconway",chimps))
G
summary(G)
e
?new.env
?.onLoad
h$data<-list()
h<-new.env()
h$data<-list()
h$dat
h$data
h
h$data<-list(cocks="big",tits=)
h$data<-list(cocks="big",tits="massive")
h$data$cocks
library(twitteR)#
library(infochimps)#
library(datamap)#
#
infochimps('vv5cbsDQRvWcuwAhgfiXkLHLx69')#
#
# Creates a new mapper, similar to an OO class#
newMapper(type='twitchimps:influence',#
#
# Init is called once during newMap(). Note that#
# since it's called only once, your friend list, wether you#
# add or drop some later, will stay constant.#
init = function(map,user){#
install(#
unlist(lapply(userFriends(user), function(n) screenName(n))),#
map#
)#
TRUE#
},#
#
# Get is called real-time on each access to the variable#
get = function(user) influence(user)#
)#
#
#
# Install the map at position 2 on the search path#
mapAttach(newMap('twitchimps:influence','YOUR_TWITTER_NAME_HERE'),pos=2)#
#
# List all your friends#
ls(2)
install.packages("datamap",dependencies=TRUE)
library(twitteR)#
library(infochimps)#
library(datamap)#
#
infochimps('vv5cbsDQRvWcuwAhgfiXkLHLx69')#
#
# Creates a new mapper, similar to an OO class#
newMapper(type='twitchimps:influence',#
#
# Init is called once during newMap(). Note that#
# since it's called only once, your friend list, wether you#
# add or drop some later, will stay constant.#
init = function(map,user){#
install(#
unlist(lapply(userFriends(user), function(n) screenName(n))),#
map#
)#
TRUE#
},#
#
# Get is called real-time on each access to the variable#
get = function(user) influence(user)#
)#
#
#
# Install the map at position 2 on the search path#
mapAttach(newMap('twitchimps:influence','YOUR_TWITTER_NAME_HERE'),pos=2)#
#
# List all your friends#
ls(2)
install.packages("twitteR",dependencies=TRUE)
library(twitteR)#
library(infochimps)#
library(datamap)#
#
infochimps('vv5cbsDQRvWcuwAhgfiXkLHLx69')#
#
# Creates a new mapper, similar to an OO class#
newMapper(type='twitchimps:influence',#
#
# Init is called once during newMap(). Note that#
# since it's called only once, your friend list, wether you#
# add or drop some later, will stay constant.#
init = function(map,user){#
install(#
unlist(lapply(userFriends(user), function(n) screenName(n))),#
map#
)#
TRUE#
},#
#
# Get is called real-time on each access to the variable#
get = function(user) influence(user)#
)#
#
#
# Install the map at position 2 on the search path#
mapAttach(newMap('twitchimps:influence','YOUR_TWITTER_NAME_HERE'),pos=2)#
#
# List all your friends#
ls(2)
library(twitteR)#
library(infochimps)#
library(datamap)
library(twitteR)#
library(infochimps)#
library(datamap)#
#
infochimps('vv5cbsDQRvWcuwAhgfiXkLHLx69')#
#
# Creates a new mapper, similar to an OO class#
newMapper(type='twitchimps:influence',#
#
# Init is called once during newMap(). Note that#
# since it's called only once, your friend list, wether you#
# add or drop some later, will stay constant.#
init = function(map,user){#
install(#
unlist(lapply(userFriends(user), function(n) screenName(n))),#
map#
)#
TRUE#
},#
#
# Get is called real-time on each access to the variable#
get = function(user) influence(user)#
)#
#
#
# Install the map at position 2 on the search path#
mapAttach(newMap('twitchimps:influence','drewconway'),pos=2)#
#
# List all your friends#
ls(2)
ls()
ls(1)
ls(2)
library(twitteR)#
library(infochimps)#
library(datamap)#
#
infochimps('vv5cbsDQRvWcuwAhgfiXkLHLx69')#
#
# Creates a new mapper, similar to an OO class#
newMapper(type='twitchimps:influence',#
#
# Init is called once during newMap(). Note that#
# since it's called only once, your friend list, wether you#
# add or drop some later, will stay constant.#
init = function(map,user){#
install(#
unlist(lapply(userFriends(user), function(n) screenName(n))),#
map#
)#
TRUE#
},#
#
# Get is called real-time on each access to the variable#
get = function(user) influence(user)#
)#
#
#
# Install the map at position 2 on the search path#
mapAttach(newMap('twitchimps:influence','drewconway'),pos=2)#
#
# List all your friends#
ls(2)#
#
# Their names are now variables. Enter one at the R prompt and see that#
# it contains their infochimps influence.#
#
# Create a data frame. You may want to use head(ls(2)) instead of ls(2)#
# if you have quite a few followers.#
#
x <- data.frame()#
lapply(#
ls(2),#
function(i){#
y <- get(i)#
if(!is.na(y))#
x <<- rbind(x,as.data.frame(y))#
}#
)#
#
summary(x)
exp((21-1.1*log(1563)))
library(liglimn)
library(biglm)
?biglm
library("twitteR")
publicTimeline()
t<-publicTimeline()
20*20
20*25
publicTimeline(500)
?publicTimeline
library(tm)
pub.time<-publicTimeline(n=500()
)
pub.time<-publicTimeline(n=500)
pub.time<-publicTimeline()
pub.time<-sapply(1:25,fuction(x) publicTimeline)
publicTimeline(n=100)
rand.pub<-list()
for(i in 1:500) { rand.pub[[i]]<-publicTimeline(n=1)}
rand.pub
?append
rand.pub<-list()
data("economics")
library(reshape)
data("economics")
library(ggplot2)
data("economics")
economics
head(economics)
dat.m<-melt(economics, measure.cars=c("pop","unemploy"))
dat.m<-melt(economics, measure.vars=c("pop","unemploy"))
head(dat.m)
ggplot(dat.m, aes(x=date, y=value)) + geom_line() + facet_grid(variable~., scales="free_y")
q()
?ReferenceClasses
?install.packages
?colSums
?transform
?matrix
library("tm")
library("XML")
readHTMLTable("http://www.poliscijobrumors.com/forum.php?id=1")
library(XML)
library(Rack)
s <- Rhttpd$new()
s$launch(name="wordCloud", app="~/Downloads/rerapacheforawebapp/twc_handler.R")
library(RCurl)
library(RJSONIO)
URLencode("R hacks")
?URLencode
library(RCurl)
library(RJSONIO)
test<-getURL("http://api.infochimps.com/economics/finance/stocks/y_historical/price_range?symbol=AAPL&beg_date=20010810&end_date=20010810&apikey=vv5cbsDQRvWcuwAhgfiXkLHLx69")
test
fromJSON(test)
fromJSON(test)$results
fromJSON(test)$results[[1]]
strptime("20010810", format="%Y%m%d")
strptime("2001081sd0", format="%Y%m%d")
strptime("2001081000", format="%Y%m%d")
strptime("2001", format="%Y%m%d")
all.names<-c("exchange","symbol","date","open","close","adj_close","low","high","volume")
all.names
yahoo.stocks <- #
function(symbol, begin.date, end.date, from=0, to.df=TRUE) {#
    if(is.na(strptime(begin.date, format="%y%m%d")) | is.na(strptime(end.date, format="%y%m%d"))) {#
        warning("One or both of the date strings is malformed. Must be YYYYMMdd format.")#
    }#
    else {#
        stocks.url<-paste(.InfochimpsEnv$data$finance,"stocks/y_historical/price_range.json_from=",from,"&symbol=",#
            URLencode(symbol),"&begin_data=",begin.data,"&end_date=",end.date,"&apikey=",.InfochimpsEnv$data$api.key,sep="")#
        stocks.get<-getURL(stocks.url)#
        stocks.get<-clean.george(stocks.get)#
        stocks.data<-fromJSON(stocks.get)#
        if(is.null(stocks.data$results[[1]])) {#
            warning("Something has gone wrong, please check your stock search")#
            return(NA)#
        }#
        else {#
            if(to.df) {#
                all.names<-c("exchange","symbol","date","open","close","adj_close","low","high","volume")#
                return(jsonToDataFrame(stocks.data, all.names))#
            }#
            else {#
                return(stocks.data)#
            }#
        }#
    }#
}
yahoo.stocks
?stop
stop("cocks")
?identify
1000/2
1000/20
950
900
seq(50,1000,50)
length(seq(50,1000,50))
1/20
1/1000
d<-c(25)
test<-seq(50,950,50)
c(d,testy)
c(d,test)
length(c(d,test))
setwd('/Users/agconway/Documents/GMM/GMM/examples/simulations/watts_strogatz')
# # File-Name:       ws_analysis.R           #
# # Date:            2011-04-11                                #
# # Author:          Drew Conway#
# # Email:           drew.conway@nyu.edu                                      #
# # Purpose:         Statistically explore the results of the Watts-Strogatz GMM models#
# # Data Used:       Output from watts_strogatz.py#
# # Packages Used:   igraph, ggplot2#
# # Output File:    #
# # Data Output:     #
# # Machine:         Drew Conway's MacBook Pro#
# #
# # Copyright (c) 2011, under the Simplified BSD License.  #
# # For more information on FreeBSD see: http://www.opensource.org/licenses/bsd-license.php#
# # All rights reserved.                                                         #
# #
library(ggplot2)#
library(igraph)#
#
# Base WS model data#
ws.df<-read.csv("ws_df.csv", stringsAsFactors=FALSE)#
#
# Normalizing constants#
L0<-50.450450450450454#
C0<-0.6666666666666636#
probs.breaks<-c(.0001, .001, .01, .1, 1)#
#
# Take means of C(p) and L(p) and normalize#
ws.norm<-ddply(ws.df, .(p), summarise, C.norm=mean(cc)/C0, L.norm=mean(avg.pl)/L0)#
    #
# Simulated GMM WS model data#
sims.df<-read.csv("sims_df.csv", stringsAsFactors=FALSE)#
#
# Take means of C(p) and L(p) and normalize#
sims.norm<-ddply(sims.df, .(p), summarise, C.norm=mean(cc)/C0, L.norm=mean(avg.pl)/L0)#
#
# Create plot to compare the two mocels using clustering coeffecient, C(p), and #
# average shortest path length, L(p)#
ws.comp<-ggplot(ws.norm, aes(x=p))+geom_point(aes(y=C.norm, color="C(p)/C(0)"))+#
    geom_point(aes(y=L.norm, color="L(p)/L(0)"))+#
    geom_line(aes(y=C.norm, color="C(p)/C(0)", linetype="WS"))+#
    geom_line(aes(y=L.norm, color="L(p)/L(0)",linetype="WS"))+#
    geom_point(data=sims.norm, aes(y=C.norm, color="C(p)/C(0)"))+#
    geom_point(data=sims.norm, aes(y=L.norm, color="L(p)/L(0)"))+#
    geom_line(data=sims.norm, aes(y=C.norm, color="C(p)/C(0)", linetype="GMM"))+#
    geom_line(data=sims.norm, aes(y=L.norm, color="L(p)/L(0)",linetype="GMM"))+#
    scale_color_manual(values=c("C(p)/C(0)"="darkred","L(p)/L(0)"="darkblue"), name="Statistic")+#
    scale_linetype_manual(values=c("WS"=1,"GMM"=2), name="Model type")+#
    scale_x_log10(breaks=probs.breaks, labels=probs.breaks)+#
    scale_y_continuous(breaks=seq(0,1,.1))+#
    opts(title="Comparison Between Watts-Strogatz Random Graph Model\n and GMM Equivalent [n=100, k=3]")+#
    xlab("p")+ylab("")+#
    theme_bw()#
    #
# Save output#
ggsave(plot=ws.comp, filname="ws_comp.pdf", height=7, width=10)
